{"version":3,"sources":["services/API_themovidb.js","components/views/Cast/Cast.js","components/views/Reviews/Reviews.js","components/views/MoviesDetailsPage/MoviesDetailsPage.js"],"names":["axios","defaults","baseURL","API_KEY","fetchFilmReviews","movieId","a","get","url","then","res","data","fetchPopularFilms","fetch","json","fetchFilmDetails","fetchFilmWithQuery","searchQuery","fetchFilmActors","fetchActorsList","state","filmActors","this","props","match","params","API_themoviedb","cast","setState","map","id","profile_path","name","character","className","src","alt","Component","review","results","length","author","content","MoviesDetailsPage","aboutFilm","handleGoBack","location","from","history","push","routes","moviesPage","reviews","onClick","poster_path","title","original_title","Date","release_date","getFullYear","vote_average","overview","genres","to","pathname","path","component","Cast","Reviews"],"mappings":"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","file":"static/js/MoviesDetailsPage-page.055261fb.chunk.js","sourcesContent":["import axios from \"axios\";\n\naxios.defaults.baseURL = \"https://api.themoviedb.org/3\";\n\nconst BaseApiMovies = \"https://api.themoviedb.org/3\";\n\nconst API_KEY = \"1d916c0c07d2a239e775f6755e7dcee9\";\n\nconst fetchPopularFilms = () => {\n  return fetch(\n    `${BaseApiMovies}/trending/movie/day?api_key=${API_KEY}`\n  ).then((res) => res.json());\n};\n\nconst fetchFilmWithQuery = (searchQuery) => {\n  return get(\n    `/search/movie?api_key=${API_KEY}&query=${searchQuery}&page=1&include_adult=false`\n  );\n};\n\nconst fetchFilmDetails = (movieId) => {\n  return get(`/movie/${movieId}?api_key=${API_KEY}`);\n};\n\nconst fetchFilmActors = (movieId) => {\n  return get(`/movie/${movieId}/credits?api_key=${API_KEY}`);\n};\n\nconst fetchFilmReviews = async (movieId) => {\n  return get(`/movie/${movieId}/reviews?api_key=${API_KEY}`);\n};\n\nconst get = async (url) => {\n  try {\n    return axios.get(url).then((res) => res.data);\n  } catch (err) {\n    throw err;\n  }\n};\n\nexport default {\n  fetchPopularFilms,\n  fetchFilmDetails,\n  fetchFilmWithQuery,\n  fetchFilmActors,\n  fetchFilmReviews,\n};\n","import React, { Component } from \"react\";\nimport API_themoviedb from \"../../../services/API_themovidb\";\n\nexport default class fetchActorsList extends Component {\n  state = { filmActors: [] };\n\n  componentDidMount() {\n    const { movieId } = this.props.match.params;\n    API_themoviedb.fetchFilmActors(movieId).then(({ cast }) =>\n      this.setState({ filmActors: cast })\n    );\n  }\n\n  render() {\n    const { filmActors } = this.state;\n\n    return (\n      <ul>\n        {filmActors.map(({ id, profile_path, name, character }) => (\n          <li key={id}>\n            <img\n              className=\"photoActor\"\n              src={`http://image.tmdb.org/t/p/w500${profile_path}`}\n              alt=\"\"\n            />\n            <p>{name}</p>\n            <p>{character}</p>\n          </li>\n        ))}\n      </ul>\n    );\n  }\n}\n","import React, { Component } from \"react\";\nimport API_themoviedb from \"../../../services/API_themovidb\";\n\nexport default class fetchActorsList extends Component {\n  state = { review: [] };\n\n  componentDidMount() {\n    const { movieId } = this.props.match.params;\n    API_themoviedb.fetchFilmReviews(movieId).then(({ results }) =>\n      this.setState({ review: results })\n    );\n  }\n\n  render() {\n    const { review } = this.state;\n    return (\n      <>\n        {review.length === 0 && <p>We don't have any reviews for this movie</p>}\n        {review.length > 0 && (\n          <ul>\n            {review.map(({ id, author, content }) => (\n              <li key={id}>\n                <h2>{author}</h2>\n                <p>{content}</p>\n              </li>\n            ))}\n          </ul>\n        )}\n      </>\n    );\n  }\n}\n","import React, { Component } from \"react\";\nimport { Link, Route } from \"react-router-dom\";\n\nimport API_themoviedb from \"../../../services/API_themovidb\";\nimport Cast from \"../Cast/Cast\";\nimport Reviews from \"../Reviews/Reviews\";\nimport routes from \"../../../routes\";\n\nexport default class MoviesDetailsPage extends Component {\n  state = {\n    aboutFilm: null,\n  };\n\n  componentDidMount() {\n    const { movieId } = this.props.match.params;\n    API_themoviedb.fetchFilmDetails(movieId).then((aboutFilm) =>\n      this.setState({ aboutFilm })\n    );\n  }\n\n  handleGoBack = () => {\n    const { state } = this.props.location;\n\n    if (state && state.from) {\n      return this.props.history.push(state.from);\n    }\n    this.props.history.push(routes.moviesPage);\n  };\n\n  render() {\n    const { aboutFilm } = this.state;\n    const { match, location } = this.props;\n    const { cast, reviews } = routes;\n    return (\n      <>\n        <button onClick={this.handleGoBack}> &#8656; Go back</button>\n        {aboutFilm && (\n          <div className=\"MovieDetails\">\n            <div className=\"MovieDetailsImage\">\n              <img\n                src={`http://image.tmdb.org/t/p/w500${aboutFilm.poster_path}`}\n                alt={aboutFilm.title}\n              />\n            </div>\n            <div className=\"MovieDetailsAbout\">\n              <h1>\n                {aboutFilm.original_title}(\n                {new Date(aboutFilm.release_date).getFullYear()})\n              </h1>\n              <p>User Scores: {aboutFilm.vote_average * 10}%</p>\n              <h2>Overview</h2>\n              <p>{aboutFilm.overview}</p>\n              <h2>Genres</h2>\n              <ul>\n                {aboutFilm.genres.map(({ id, name }) => (\n                  <li key={id}>{name}</li>\n                ))}\n              </ul>\n            </div>\n          </div>\n        )}\n        <div>\n          <h2>Additional information</h2>\n          <ul className=\"addInformation\">\n            <li>\n              <Link\n                to={{\n                  pathname: `/movies/${match.params.movieId}/cast`,\n                  state: { from: location },\n                }}\n              >\n                Cast\n              </Link>\n            </li>\n            <li>\n              <Link\n                to={{\n                  pathname: `/movies/${match.params.movieId}/reviews`,\n                  state: { from: location },\n                }}\n              >\n                Reviews\n              </Link>\n            </li>\n          </ul>\n          <Route path={cast} component={Cast} />\n          <Route path={reviews} component={Reviews} />\n        </div>\n      </>\n    );\n  }\n}\n"],"sourceRoot":""}